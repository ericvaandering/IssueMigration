#!  /usr/bin/env python

import argparse
import StringIO
import time
import xmltodict

from github import Github, GithubException

from my_maps import userMap, defaultUser

import pprint

def makeLabels(repo, xmldict):

    labels = {}

    for issue in xmldict[u'savaneexport']['item']:
        labels['P: %s' % issue['priority']] = 'P: %s' % issue['priority']
        labels['C: %s' % issue['category']] = 'C: %s' % issue['category']
        labels['S: %s' % issue['status']] = 'S: %s' % issue['status']

    labels['S: Duplicate'] = 'duplicate'
    labels['S: Invalid'] = 'invalid'

    # Make the labels at GitHub

    for label in labels.keys():
        try:
            ghLabel = repo.create_label(name=labels[label], color='000000')
            print "Created label ", label, " as ", labels[label]
            labels[label] = ghLabel
        except GithubException:
            print "Label ", labels[label], " already exists"
            labels[label] = repo.get_label(labels[label])

    return labels

def convertAssignee(gh, name):

    # Convert Savannah to Github names

    try:
        return gh.get_user(userMap[name])
    except: # Return user running code
        oldname = name
        name = gh.get_user().login
        print " No github name for ", oldname, " using ", name
        return gh.get_user(name)

def addComments(savIssue, ghIssue):
    try:
        history = savIssue['history']
    except KeyError:
        print "  No history for event, no comments"
        return

    events = history['event']
    if not isinstance(events, list):
        events = [events]

    for event in events:
        date = time.ctime(int(event['date']))

        fields = event['field']
        if not isinstance(fields, list):
            fields = [fields]

        for field in fields:
            author = field['modified_by']
            type = field['field_name']

            message = None
            if type == 'Open/Closed':
                message = field['new_value'] + ' by ' + author + ' on ' + date
                print "  Added comment on who closed issue"
            elif type == "Original_Submission":
                value = ''
                if field['new_value']:
                    value += field['new_value']
                if field['old_value']:
                    value += field['old_value']

                message = 'Comment by ' + author.encode('ascii', 'replace') + ' on ' + date + '\n\n' + value.encode('ascii', 'replace')
                print "  Added comment by " + author

            if message:
                try:
                    ghIssue.create_comment(message)
                except GithubException:
                    print "  ********* Comment insertion failed ************


def createIssue(gh, repo, issue, labels):

    title = issue['summary']
    body = issue['original_submission'] or 'N/A'
    assignee = convertAssignee(gh, issue['assigned_to'])
    label_array = []
    label_array.append(labels['P: %s' % issue['priority']])
    label_array.append(labels['C: %s' % issue['category']])
    label_array.append(labels['S: %s' % issue['status']])


    header = 'Original Savannah ticket ' + issue['item_id'] + ' reported by ' + issue['assigned_to'] + ' on ' + time.ctime(int(issue['submitted_on'])) + '.\n\n'

    try:
        ghIssue = repo.create_issue(title=title, body=header+body, assignee=assignee, labels=label_array)
        print "Created issue ", title
    except GithubException as e:
        print "Problem creating issue ", title
        return

    addComments(issue, ghIssue)

    if issue['open_closed'] == 'Closed':
        print " Closed issue"
        ghIssue.edit(state='closed')

def checkRateLimit(gh, threshold=1000, sleepTime=300):

    remaining = 0
    while remaining < threshold:
        lim = gh.get_rate_limit()
        remaining = lim.rate.remaining

        if remaining < threshold:
            print "Only %s API calls remaining before rate limit. Sleeping for %s seconds." % (remaining, sleepTime)
            time.sleep(sleepTime)

    return remaining

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Migrate Savannah issues from XML file to GitHub project')
    parser.add_argument('xml_file')
    parser.add_argument('-r', '--repo', help='Github repository name')
    parser.add_argument('-u', '--user', help='Github user name')
    parser.add_argument('-p', '--pass', help='Github password for user')
    parser.add_argument('-o', '--org', help='Github organization of repository (otherwise use USER)')
    args = parser.parse_args()


    ghConfig = {'user':'', 'password':'', 'org':'', 'repo':''}


    xml_file = vars(args)['xml_file']
    ghConfig.update({
        'repo' : vars(args)['repo'],
        'user' : vars(args)['user'],
        'password' : vars(args)['pass'],
        'org' : vars(args)['org'],
    })

    gh = Github(ghConfig['user'],ghConfig['password'])

    if ghConfig['org']:
        org = gh.get_organization(ghConfig['org'])
        repo = org.get_repo(ghConfig['repo'])
    else:
        user = gh.get_user(ghConfig['user'])
        repo = user.get_repo(ghConfig['repo'])

    xml_fh = open(xml_file)
    xml = xml_fh.read()
    xmldict = xmltodict.parse(xml)

    labels = makeLabels(repo, xmldict)

    for count, issue in enumerate(xmldict[u'savaneexport']['item']):
        if not count % 10: # Check every 10 issues
            checkRateLimit(gh)
        createIssue(gh, repo, issue, labels)
