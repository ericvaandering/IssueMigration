#!  /usr/bin/env python

import argparse
import StringIO
import time
import xmltodict

from github import Github, GithubException

from my_maps import userMap, defaultUser

import pprint

def makeLabels(repo, xmldict):

    labels = {}

    for issue in xmldict[u'savaneexport']['item']:
        labels['P: %s' % issue['priority']] = 'P: %s' % issue['priority']
        labels['C: %s' % issue['category']] = 'C: %s' % issue['category']
        labels['S: %s' % issue['status']] = 'S: %s' % issue['status']

    labels['S: Duplicate'] = 'duplicate'
    labels['S: Invalid'] = 'invalid'

    # Make the labels at GitHub

    for label in labels.keys():
        try:
            repo.create_label(name=labels[label], color='000000')
            print "Created label ", label, " as ", labels[label]
        except GithubException:
            print "Label ", labels[label], " already exists"

    return labels

def convertAssignee(gh, name):

    # Convert Savannah to Github names

    try:
        return gh.get_user(userMap[name])
    except: # Return user running code
        oldname = name
        name = gh.get_user().login
        print "No github name for ", oldname, " using ", name
        return gh.get_user(name)


def createIssue(gh, repo, issue, labels):

    title = issue['summary']
    body = issue['original_submission'] or 'N/A'
    assignee = convertAssignee(gh, issue['assigned_to'])
    label_array = []
    label_array.append(repo.get_label(labels['P: %s' % issue['priority']]))
    label_array.append(repo.get_label(labels['C: %s' % issue['category']]))
    label_array.append(repo.get_label(labels['S: %s' % issue['status']]))


    header = 'Original Savannah ticket ' + issue['item_id'] + ' reported by ' + issue['assigned_to'] + ' on ' + time.ctime(int(issue['submitted_on'])) + '.\n\n'

    try:
        json = repo.create_issue(title=title, body=header+body, assignee=assignee, labels=label_array)
        print "Created issue ", title
    except GithubException as e:
        print "Problem creating issue ", title
        return



if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Migrate Savannah issues from XML file to GitHub project')
    parser.add_argument('xml_file')
    parser.add_argument('-r', '--repo', help='Github repository name')
    parser.add_argument('-u', '--user', help='Github user name')
    parser.add_argument('-p', '--pass', help='Github password for user')
    parser.add_argument('-o', '--org', help='Github organization of repository (otherwise use USER)')
    args = parser.parse_args()


    ghConfig = {'user':'', 'password':'', 'org':'', 'repo':''}


    xml_file = vars(args)['xml_file']
    ghConfig.update({
        'repo' : vars(args)['repo'],
        'user' : vars(args)['user'],
        'password' : vars(args)['pass'],
        'org' : vars(args)['org'],
    })

    gh = Github(ghConfig['user'],ghConfig['password'])

    if ghConfig['org']:
        org = gh.get_organization(ghConfig['org'])
        repo = org.get_repo(ghConfig['repo'])
    else:
        user = gh.get_user(ghConfig['user'])
        repo = user.get_repo(ghConfig['repo'])


    xml_fh = open(xml_file)
    xml = xml_fh.read()
    xmldict = xmltodict.parse(xml)

    labels = makeLabels(repo, xmldict)

    for issue in xmldict[u'savaneexport']['item']:
        createIssue(gh, repo, issue, labels)
